{
    "swagger": "2.0",
    "info": {
        "description": "Service for test task Effective mobile",
        "title": "Test-task",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1/",
    "paths": {
        "/people": {
            "get": {
                "description": "get accounts by filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "poeple"
                ],
                "summary": "List poeple",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "num of page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 3,
                        "description": "limit wrties on page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "oleg",
                        "description": "person filter by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "invanov",
                        "description": "person filter by surname",
                        "name": "surname",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "petrovich",
                        "description": "person filter by patronymic",
                        "name": "patronymic",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 32,
                        "description": "person filter by exact age",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 10,
                        "description": "person filter by min age",
                        "name": "minage",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 35,
                        "description": "person filter by max age",
                        "name": "maxage",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "male",
                        "description": "person filter by gender",
                        "name": "gender",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "RU",
                        "description": "person filter by nationality",
                        "name": "nationality",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/list.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "Creating, enriching and saving new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Create new user",
                "operationId": "create",
                "parameters": [
                    {
                        "description": "Person basic info",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/create.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/create.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            },
            "delete": {
                "description": "Delete the user by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Delete",
                "operationId": "create",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Person ID",
                        "name": "input",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "invalid id",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update any field of person\nNeed at least one field to update",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Update person data",
                "operationId": "update",
                "parameters": [
                    {
                        "description": "Person field data to update",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/update.Request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "id of person to update",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Returns a person fields with update",
                        "schema": {
                            "$ref": "#/definitions/update.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        }
    },
    "definitions": {
        "create.Request": {
            "type": "object",
            "required": [
                "name",
                "surname"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2,
                    "example": "Alexander"
                },
                "patronymic": {
                    "description": "required",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2,
                    "example": "Petrovich"
                },
                "surname": {
                    "description": "required",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2,
                    "example": "Sidorov"
                }
            }
        },
        "create.Response": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "response": {
                    "$ref": "#/definitions/response.Response"
                }
            }
        },
        "list.Response": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Person"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/types.Meta"
                },
                "response": {
                    "$ref": "#/definitions/response.Response"
                }
            }
        },
        "models.Person": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "gender": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nationality": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        },
        "response.Response": {
            "description": "all respones based on this and can overwrite this",
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "types.Meta": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "next": {
                    "type": "boolean"
                },
                "offset": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "update.Request": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "gender": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "nationality": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "surname": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                }
            }
        },
        "update.Response": {
            "type": "object",
            "properties": {
                "person": {
                    "$ref": "#/definitions/models.Person"
                },
                "respone": {
                    "$ref": "#/definitions/response.Response"
                }
            }
        }
    }
}